/*
 Copyright 2019 Will Greenberg
 Adapted from https://github.com/charithe/gcgrpcpool/blob/master/gcgrpcpool.go

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package galaxycache

import (
	"context"
	"fmt"

	pb "github.com/vimeo/groupcache/groupcachepb"
	"google.golang.org/grpc"
)

// GRPCFetchProtocol specifies GRPC specific options for GRPC-based peer communcation
type GRPCFetchProtocol struct {
	// connection set up configurations for all peers
	PeerDialOptions []grpc.DialOption
}

// GRPCFetchOptions holds the dial options for client side (fetcher) instantiation
type GRPCFetchOptions struct {
	// connection set up configurations for all peers
	PeerDialOptions []grpc.DialOption
	// if true, there will be no TLS
	AllInsecureConnections bool
}

type grpcFetcher struct {
	address string
	conn    *grpc.ClientConn
}

// NewGRPCFetchProtocol creates a GRPC fetch protocol to be passed into a Universe constructor
func NewGRPCFetchProtocol(dialOpts ...grpc.DialOption) *GRPCFetchProtocol {
	return &GRPCFetchProtocol{PeerDialOptions: dialOpts}
}

// NewFetcher implements the FetchProtocol interface for GRPCFetchProtocol by constructing a new fetcher to fetch from peers via GRPC
func (gp *GRPCFetchProtocol) NewFetcher(address string) (RemoteFetcher, error) {
	conn, err := grpc.Dial(address, gp.PeerDialOptions...)
	if err != nil {
		return nil, err
	}
	return &grpcFetcher{address: address, conn: conn}, nil
}

// GRPCPeerServer implements the PeerServer interface generated by the Peer pb service
type GRPCPeerServer struct {
	parentUniverse *Universe
}

// RegisterGRPCServer creates a new GRPC server and GRPCHandler and registers them for RPC use;
// the purpose of the GRPCHandler is to keep track of the parent universe in order to access the groups for Get calls
func RegisterGRPCServer(universe *Universe, grpcServer *grpc.Server) {
	pb.RegisterPeerServer(grpcServer, &GRPCPeerServer{parentUniverse: universe})
}

// GetFromPeer implements the generated pb.GalaxycacheServer interface, making an internal Get() after receiving a remote call from a peer
func (gp *GRPCPeerServer) GetFromPeer(ctx context.Context, req *pb.GetRequest) (*pb.GetResponse, error) {
	group := gp.parentUniverse.GetGalaxy(req.Galaxy)
	if group == nil {
		// log.Warnf("Unable to find group [%s]", req.Group)
		return nil, fmt.Errorf("Unable to find group [%s]", req.Galaxy)
	}

	group.Stats.ServerRequests.Add(1) // keep track of the num of req

	var value ByteCodec
	err := group.Get(ctx, req.Key, &value)
	if err != nil {
		return nil, fmt.Errorf("Failed to retrieve [%s]: %v", req, err)
	}

	return &pb.GetResponse{Value: value}, nil
}

// Fetch here implements the RemoteFetcher interface for sending Gets to peers over an RPC connection
func (g *grpcFetcher) Fetch(ctx context.Context, galaxy string, key string) ([]byte, error) {
	client := pb.NewPeerClient(g.conn)
	resp, err := client.GetFromPeer(ctx, &pb.GetRequest{
		Galaxy: galaxy,
		Key:    key})
	if err != nil {
		return nil, fmt.Errorf("Failed to GET [%s]: %v", galaxy, err)
	}

	return resp.Value, nil
}

// Close here implements the RemoteFetcher interface for closing a client-side RPC connection opened by the fetcher
func (g *grpcFetcher) Close() error {
	if g.conn == nil {
		return nil
	}
	return g.conn.Close()
}
